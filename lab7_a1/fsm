`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    04:56:15 05/31/2019 
// Design Name: 
// Module Name:    fsm 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module fsm(
    input clk,
    input [0:1] y,
    output [0:3] led
    );
	reg [0:2] microcoderom [0:12];
	reg [0:3] dispatchrom3 [0:3];
	reg [0:3] dispatchrom10 [0:3];
	reg [0:3] pre_stt;
	reg [0:3] led;
	integer cnt = 0;                /// counter

	initial begin
		pre_stt = 4'd0;
		microcoderom[0] = 0;
		microcoderom[1] = 0;
		microcoderom[2] = 0;
		microcoderom[3] = 1;
		microcoderom[4] = 2;
		microcoderom[5] = 2;
		microcoderom[6] = 2;
		microcoderom[7] = 0;
		microcoderom[8] = 0;
		microcoderom[9] = 0;
		microcoderom[10] = 3;
		microcoderom[11] = 4;
		microcoderom[12] = 4;
		dispatchrom3[0] = 4;
		dispatchrom3[1] = 5;
		dispatchrom3[2] = 6;
		dispatchrom3[3] = 6;
		dispatchrom10[0] = 11;
		dispatchrom10[1] = 12;
		dispatchrom10[2] = 12;
		dispatchrom10[3] = 12;
		
	end
	
	always @(posedge clk)
	begin
		if(cnt == 100000000)
		begin
			cnt <= 0;
			case(microcoderom[pre_stt])
			0: led <= pre_stt+1;
			1: led <= dispatchrom3[y];
			2: led <= 4'd7;
			3: led <= dispatchrom10[y];
			4: led <= 4'd0;
			endcase
			
			pre_stt <= led;
		end
		else
		begin
			cnt <= cnt+1;
		end
	end



endmodule
